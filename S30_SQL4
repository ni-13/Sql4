# The-number-of-seniors-and-juniors-to-join-the-company_Solution_Q1

WITH cte AS(
SELECT employee_id, experience, SUM(salary) OVER(PARTITION BY experience ORDER BY salary, employee_id) AS 'rsum'
FROM candidates)

SELECT 'Senior' AS experience, COUNT(employee_id) AS 'accepted_candidates' 
FROM cte 
WHERE experience = 'Senior' AND rsum <= 70000
UNION
SELECT 'Junior' AS experience, COUNT(employee_id) AS 'accepted_candidates'
FROM cte
WHERE experience = 'Junior' AND rsum <= (SELECT 70000 - IFNULL(MAX(rsum),0) FROM cte WHERE experience = 'Senior' AND rsum <= 70000);


----------------------------------------------------------------------------------------------------------------------

# League-statistics_Solution_Q2

WITH cte AS(
    SELECT home_team_id AS r1, home_team_goals AS g1, away_team_goals AS g2 
    FROM Matches

    UNION ALL

    SELECT away_team_id AS r1, away_team_goals AS g1, home_team_goals AS g2
    FROM Matches
)

SELECT t.team_name, COUNT(c.r1) AS 'matches_played', SUM(
    CASE
        WHEN c.g1 > c.g2 THEN 3
        WHEN c.g1 = c.g2 THEN 1
        ELSE 0
    END
) AS 'points', SUM(c.g1) AS 'goal_for', SUM(c.g2) AS 'goal_against', SUM(c.g1) - SUM(c.g2) AS 'goal_diff' FROM teams t JOIN cte c ON t.team_id = c.r1 
GROUP BY c.r1
ORDER BY points DESC, goal_diff DESC, t.team_name;


----------------------------------------------------------------------------------------------------------------------

# Sales-person_Solution_Q3

# can use left/ inner join 

SELECT s.name 
FROM SalesPerson s
WHERE s.sales_id NOT IN (SELECT o.sales_id FROM Orders o LEFT JOIN company c ON c.com_id = o.com_id WHERE c.name = 'Red');

# Alternative1

# using cte and NOT IN 

 WITH cte AS(
    SELECT o.sales_id FROM orders o LEFT JOIN company c ON c.com_id = o.com_id WHERE c.name = 'RED'
 )
 SELECT s.name 
 FROM SalesPerson s 
 WHERE s.sales_id NOT IN (SELECT sales_id from cte);


# Friend Requests II: Who Has the Most Friends_Solution_Q4

WITH cte AS(
    SELECT requester_id as r1 from RequestAccepted
    UNION ALL
    SELECT accepter_id AS r1 FROM RequestAccepted
),

ACTE AS(
    SELECT r1 AS'id', COUNT(r1) AS 'num'
    FROM cte
    GROUP BY r1    
)

SELECT id, num 
FROM ACTE
ORDER BY num DESC
LIMIT 1;


# Alternative1

#use of max fn

WITH cte AS(
    SELECT requester_id as r1 from RequestAccepted
    UNION ALL
    SELECT accepter_id AS r1 FROM RequestAccepted
),

ACTE AS(
    SELECT r1 AS'id', COUNT(r1) AS 'num'
    FROM cte
    GROUP BY r1    
)

SELECT id, num 
FROM ACTE
WHERE num = (SELECT MAX(num) FROM ACTE);


# Alternative2

WITH cte AS(
    SELECT requester_id as 'id', (SELECT COUNT(*) FROM RequestAccepted
    WHERE id = requester_id OR id = accepter_id) AS 'num' 
    FROM RequestAccepted

    UNION ALL
    
    SELECT accepter_id as 'id', (SELECT COUNT(*) FROM RequestAccepted
    WHERE id = requester_id OR id = accepter_id) AS 'num' 
    FROM RequestAccepted
)

SELECT * FROM cte
ORDER BY num DESC
LIMIT 1;